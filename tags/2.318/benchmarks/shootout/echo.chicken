;;;; -O3 -bf -lambda-lift

(declare (fixnum) (uses tcp posix))

(define PORT 8888)
(define DATA "Hello there sailor")
(define n 10)

(define (server)
  (process-fork client)
  (let-values ([(in out) (tcp-accept (tcp-listen PORT))])
    (let loop ([i (read-line in)]
	       [bytes 0])
      (if (not (eof-object? i))
	  (begin
	    (write-line i out)
	    (loop (read-line in)
		  (+ bytes (string-length i))))
	  (begin
	    (display "server processed ")
	    (display bytes)
	    (display " bytes\n"))))))

(define (client)
  (let-values ([(in out) (tcp-connect "127.0.0.1" PORT)])
    (let loop ([n n])
      (if (> n 0)
	  (begin
	    (write-line DATA out)
	    (let ([i (read-line in)])
	      (if (equal? DATA i)
		  (loop (- n 1))
		  'error)))
	  (close-output-port out)))))

(define (main args)
  (set! n 
    (if (null? args)
        1
        (string->number (car args))))
  (server))

(time (main (command-line-arguments)))
