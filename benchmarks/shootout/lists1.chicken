;;; -*- mode: scheme -*-
;;; $Id: lists1.chicken,v 1.1 2004/09/13 20:39:31 flw Exp $
;;; http://www.bagley.org/~doug/shootout/

(declare (fixnum) (disable-interrupts) (uses srfi-1))

(define (main #!optional (N "1"))
  (let* ((N (string->number N))
	 (A '())
	 ;; create empty list B
	 (B '())
	 (mid (/ N 2))
	 (sum 0))

    ;; create list (A) of integers from 1 through N
    (do ((i N (- i 1)))
	((= i 0))
      (set! A (cons i A)))

    ;; move each individual item from A to B, in a loop, reversing order
    (do ((empty (null? A) (null? A)))
	(empty)
      (set! B (cons (car A) B))
      (set! A (cdr A)))

    ;; print first 2 elements of B
    (display (car B)) (display " ") (display (cadr B)) (newline)

    ;; reverse B (can be done in place)
    (set! B (reverse! B))

    ;; is 0 a member of B?
    (display (if (member 0 B) "true" "false")) (newline)

    ;; is N a member of B?
    (display (if (member N B) "true" "false")) (newline)

    ;; filter values from B to A that are less than N/2, preserving order
    (for-each (lambda (x) (if (< x mid) (set! A (cons x A)))) B)
    (set! A (reverse! A))

    ;; print first ten items of A
    (do ((i 0 (+ i 1))
	 (x A (cdr x)))
	((or (= i 10) (null? x)))
      (display (car x))
      (if (< i 9) (display " ") (newline)))

    ;; print sum of items in A that are less than 1000
    (for-each (lambda (x) (if (< x 1000) (set! sum (+ x sum)))) A)
    (display sum) (newline)

    ;; append B to end of A
    (set-cdr! (last-pair A) B)
    
    ;; print length and last element of A
    (display (length A)) (display " ")
    (display (car (last-pair A))) (newline)))

(apply main (command-line-arguments))
