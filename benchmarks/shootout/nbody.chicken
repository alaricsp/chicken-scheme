;;; The Great Computer Language Shootout
;;; http://shootout.alioth.debian.org/
;;
;; Ported from Xavier Leroy's Ocaml implementation.


(declare (unsafe) (block) (disable-interrupts) (uses format))

#|
Correct output N = 1000 is

-0.169075164
-0.169087605
|#

;;; define planetary masses, initial positions & velocity

(define PI 3.141592653589793)
(define SOLAR_MASS (* 4 PI PI))
(define DAYS_PER_YEAR 365.24)

(define-record planet x y z vx vy vz mass)

(define Jupiter 
  (make-planet
   4.84143144246472090e+00
   -1.16032004402742839e+00
   -1.03622044471123109e-01
   (* 1.66007664274403694e-03 DAYS_PER_YEAR)
   (* 7.69901118419740425e-03 DAYS_PER_YEAR)
   (* -6.90460016972063023e-05 DAYS_PER_YEAR)
   (* 9.54791938424326609e-04 SOLAR_MASS) ) )

(define Saturn 
  (make-planet
   8.34336671824457987e+00
   4.12479856412430479e+00
   -4.03523417114321381e-01
   (* -2.76742510726862411e-03 DAYS_PER_YEAR)
   (* 4.99852801234917238e-03 DAYS_PER_YEAR)
   (* 2.30417297573763929e-05 DAYS_PER_YEAR)
   (* 2.85885980666130812e-04 SOLAR_MASS) ) )

(define Uranus
  (make-planet
   1.28943695621391310e+01
   -1.51111514016986312e+01
   -2.23307578892655734e-01
   (* 2.96460137564761618e-03 DAYS_PER_YEAR)
   (* 2.37847173959480950e-03 DAYS_PER_YEAR)
   (* -2.96589568540237556e-05 DAYS_PER_YEAR)
   (*  4.36624404335156298e-05 SOLAR_MASS) ) )

(define Neptune
  (make-planet
   1.53796971148509165e+01
   -2.59193146099879641e+01
   1.79258772950371181e-01
   (* 2.68067772490389322e-03 DAYS_PER_YEAR)
   (* 1.62824170038242295e-03 DAYS_PER_YEAR)
   (* -9.51592254519715870e-05 DAYS_PER_YEAR)
   (* 5.15138902046611451e-05 SOLAR_MASS) ) )

(define Sun (make-planet 0 0 0 0 0 0 SOLAR_MASS))


;; integrator

(define (advance! bodies dt)
  (let ([n (vector-length bodies)])
    (do ([i 0 (fx+ i 1)])
	((fx>= i n))
      (let ([b (vector-ref bodies i)])
	(do ([j (fx+ i 1) (fx+ j 1)])
	    ((fx>= j n))
	  (let* ([b2 (vector-ref bodies j)]
		 [dx (- (planet-x b) (planet-x b2))]
		 [dy (- (planet-y b) (planet-y b2))]
		 [dz (- (planet-z b) (planet-z b2))]
		 [distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz)))]
		 [mag (/ dt (* distance distance distance))] 
		 [mass (planet-mass b)]
		 [mass2 (planet-mass b2)] )
	    (planet-vx-set! b (- (planet-vx b) (* dx mass2 mag)))
	    (planet-vy-set! b (- (planet-vy b) (* dy mass2 mag)))
	    (planet-vz-set! b (- (planet-vz b) (* dz mass2 mag)))
	    (planet-vx-set! b2 (+ (planet-vx b2) (* dx mass mag)))
	    (planet-vy-set! b2 (+ (planet-vy b2) (* dy mass mag)))
	    (planet-vz-set! b2 (+ (planet-vz b2) (* dz mass mag))) ) ) ) )
    (do ([i 0 (fx+ i 1)])
	((fx>= i n))
      (let ([b (vector-ref bodies i)])
	(planet-x-set! b (+ (planet-x b) (* dt (planet-vx b))))
	(planet-y-set! b (+ (planet-y b) (* dt (planet-vy b))))
	(planet-z-set! b (+ (planet-z b) (* dt (planet-vz b)))) ) ) ) )


(define (energy bodies)
  (let ([e 0.0]
	[n (vector-length bodies)] )
    (do ([i 0 (fx+ i 1)])
	((fx>= i n))
      (let ([b (vector-ref bodies i)])
	(set! e (+ e (* 0.5 
			(planet-mass b)
			(+ (* (planet-vx b) (planet-vx b))
			   (* (planet-vy b) (planet-vy b))
			   (* (planet-vz b) (planet-vz b)) ) ) ) )
	(do ([j (fx+ i 1) (fx+ j 1)])
	    ((fx>= j n))
	  (let* ([b2 (vector-ref bodies j)]
		 [dx (- (planet-x b) (planet-x b2))]
		 [dy (- (planet-y b) (planet-y b2))]
		 [dz (- (planet-z b) (planet-z b2))] 
		 [distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz)))] )
	    (set! e (- e (/ (* (planet-mass b) (planet-mass b2)) distance))) ) ) ) )
    e) )

(define (offset-momentum! bodies)
  (let ([px 0.0] 
	[py 0.0]
	[pz 0.0] 
	[n (vector-length bodies)] )
    (do ([i 0 (fx+ i 1)])
	((fx>= i n))
      (let* ([b (vector-ref bodies i)]
	     [mass (planet-mass b)] )
	(set! px (+ px (* (planet-vx b) mass)))
	(set! py (+ py (* (planet-vy b) mass)))
	(set! pz (+ pz (* (planet-vz b) mass))) ) )
    (let ([b0 (vector-ref bodies 0)])
      (planet-vx-set! b0 (/ (- px) SOLAR_MASS))
      (planet-vy-set! b0 (/ (- py) SOLAR_MASS))
      (planet-vz-set! b0 (/ (- pz) SOLAR_MASS))) ) )

(define bodies (vector Sun Jupiter Saturn Uranus Neptune))
(define n (string->number (car (command-line-arguments))))

(offset-momentum! bodies)

(format #t "~,9f~%" (energy bodies))

(do ([i 0 (fx+ i 1)])
    ((fx>= i n))
  (advance! bodies 0.01) )

(format #t "~,9f~%" (energy bodies))
