;;; $Id: regexmatch.chicken,v 1.1 2004/09/13 20:39:31 flw Exp $
;;; http://www.bagley.org/~doug/shootout/

(declare (fixnum) (disable-interrupts) (uses srfi-1 regex))

(define rx
  (string-append
   "(^|[^0-9\\(])"			; (1) preceeding non-digit or bol
   "("					; (2) area code
   "\\(([0-9][0-9][0-9])\\)"		; (3) is either 3 digits in parens
   "|"					; or
   "([0-9][0-9][0-9])"			; (4) just 3 digits
   ")"					; end of area code
   " "					; area code is followed by one space
   "([0-9][0-9][0-9])"			; (5) exchange is 3 digits
   "[ -]"				; separator is either space or dash
   "([0-9][0-9][0-9][0-9])"		; (6) last 4 digits
   "([^0-9]|$)"				; must be followed by a non-digit
   ))

(define (main #!optional (n "1"))
  (let ((phonelines '())
	(rx (regexp rx))
	(count 0))
    (let loop ((line (read-line)))
      (cond ((eof-object? line) #f)
	    (else
	     (set! phonelines (cons line phonelines))
	     (loop (read-line)))))
    (set! phonelines (reverse! phonelines))
    (do ([n (string->number n) (sub1 n)])
	((negative? n))
      (let loop ((phones phonelines)
		 (count 0))
	(if (null? phones)
	    count
	    (begin
	      (match (string-match rx (car phones))
		[(_ _ a1 a2 a3 exch numb _)
		 (let ((area (and a1 (or a2 a3))))
		   (when area
		     (let ((num (string-append "(" area ") " exch "-" numb)))
		       (set! count (add1 count))
		       (when (zero? n) (print count ": " num))) ) ) ]
		[_ #f] )
	      (loop (cdr phones) count) ) ) ) ) ) )

(apply main (command-line-arguments))
