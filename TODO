TODO for macro/module system					-*- Outline -*-

* bugs
** modules
*** import-libraries
**** iexported macros will always have empty static SEs
     breaks in last module-tests example (baz should have gna in SE)
*** code-duplication in compiler and evaluator for ##core#module
*** "scheme" module does not include some special forms ("define-syntax", etc.)
*** import-for-syntax imports value bindings into import-env
    should actually be a distinct meta-import-env.

* documentation
** modules
*** unexported defines do not appear in dlist and thus will trigger a warning
    
*** document export issues
**** v-bindings in exported macros must be exported
**** unexported macros in exported ones may not
**** indirect exports

* build
** clear up soname thing (removed here, ivan says he needs it for debian)
** chicken.texi needs to be regenerated

* test
** syntax-export of srfi-14 module
** foreign module
** warnings for re-imports
** modularize fps egg as a more realistic test

* syntax-error
** if ##sys#current-module is set, add name to error message?

* modules
** checks
*** module-def not at toplevel
*** redef of imported id
*** reimport of imported id
** allow exporting all definitions
** "define-for-syntax" still right?

* csi
** describe should print if symbol is interned

* compiler
** warn if encountering global ref to "unquote[-splicing]"
** add command-line option for import
   should we?

* eggs to be removed
** syntax-case
*** sxml-match
** codewalk
*** modules, crunch
** syntactic-closures
** simple-macros
** alexpander

* more bugs
** macro expansion
*** canonicalization of body has to keep track of introduced bindings
    or global macros will apply to local bodies that shadow global id locally:
    (define-syntax foo ...)
    (let () (define (foo) 1) (foo)) ; last expr uses foo macro
**** partially implemented (but not for local syntax bindings)
