TODO for macro/module system					-*- Outline -*-

* documentation
** chicken.texi needs to be regenerated

* bugs
** modules
*** exported macros do not inherit local se
    and are thus unhygienic and require the importing context to import dependencies
*** code-duplication in compiler and evaluator for ##core#module
*** syntax-definitions in modules
    transformers use ##sys#meta-macro-environment + unset ##sys#current-module,
    this may not be be sufficient (expansion assumes ids are imported in used
    context) [is this still relevant? we could simply reexport the ids used in
    in the expansion]
*** "scheme" module does not include some special forms ("define-syntax", etc.)
*** import-for-syntax imports value bindings into import-env
    should actually be a distinct meta-import-env.

* test
** reexports
** syntax-export of srfi-14 module
** foreign module
** line-number retention over macro-expansion
** warnings for re-imports
** add ec to test-suite

* syntax-error
** if ##sys#current-module is set, add name to error message

* modules
** checks
*** redef of imported id
*** reimport of imported id
** "ports" import library
** allow exporting all definitions
** "define-for-syntax" still right?

* csi
** describe should print if symbol is interned

* compiler
** warn if encountering global ref to "unquote[-splicing]"
** add command-line option for import

* eggs to be adapted/obsoleted
** syntax-case (eval/expand integration?)
*** sxml-match
** codewalk
   must probably go... influences modules, crunch
** remove
   modules
** syntactic-closures?
** simple-macros
** alexpander

* more bugs
** macro expansion
*** canonicalization of body has to keep track of introduced bindings
    or global macros will apply to local bodies that shadow global id locally:
    (define-syntax foo ...)
    (let () (define (foo) 1) (foo)) ; last expr uses foo macro
**** partially implemented (but not for local syntax bindings)
