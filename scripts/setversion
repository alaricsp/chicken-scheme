#!/bin/sh
#| setversion - Bump version-number -*- Scheme -*-
exec csi -s "$0" "$@"
|#

(use srfi-1 utils posix)

(define buildversion (->string (car (read-file "buildversion"))))
(define buildbinaryversion (car (read-file "buildbinaryversion")))

(define files '("README" "manual/The User's Manual"))

(define-syntax rx
  (syntax-rules ()
    ((_ r) (force (delay (regexp r))))))

(define (patch which rx subst)
  (cond ((and (list? which) (= 2 (length which)))
	 (let ((from (car which))
	       (to (cadr which)))
	   (print "patching " from " ...")
	   (with-output-to-file to
	     (lambda ()
	       (with-input-from-file from
		 (lambda ()
		   (let loop ()
		     (let ((ln (read-line)))
		       (unless (eof-object? ln)
			 (write-line (string-substitute rx subst ln #t)) 
			 (loop) ) ) ) )
		 binary:) )
	     binary:)))
	(else
	 (let ((tmp (create-temporary-file)))
	   (patch (list which tmp) rx subst)
	   (system* "mv ~S ~S" tmp which) ) ) ) )

(define (parse-version v)
  (string-match (rx "(\\d+)\\.(\\d+)\\.(\\d+)(.*)") v) )

(define (main args)
  (cond ((member "-set" args) =>
	 (lambda (a) (set! buildversion (cadr a))) )
	((not (member "-noinc" args))
	 (let* ((v (parse-version buildversion))
		(maj (cadr v))
		(min (caddr v))
		(pl (cadddr v))
		(huh (car (cddddr v))))
	   (set! buildversion (conc maj "." min "." (add1 (string->number pl)) huh)) ) ) )
  (with-output-to-file "buildversion" (cut display buildversion) binary:)
  (with-output-to-file "version.scm" 
    (lambda ()
      (write `(define-constant +build-version+ ,buildversion))
      (newline) )
    binary:)
  (system* "cat version.scm")
  (let ([vstr (sprintf "version ~A" buildversion)])
    (for-each (cut patch <> (rx "version [0-9][-.0-9a-zA-Z]+") vstr) files) )
  0)

(main (command-line-arguments))
