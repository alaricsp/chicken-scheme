# Makefile.msvc - configuration for MSVC -*- Makefile -*-
#
# Copyright (c) 2007, Felix L. Winkelmann
# Copyright (c) 2008-2009 The Chicken Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
# conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer. 
#   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided with the distribution. 
#   Neither the name of the author nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Send bugs, suggestions and ideas to: 
#
# felix@call-with-current-continuation.org
#
# Felix L. Winkelmann
# Unter den Gleichen 1
# 37130 Gleichen
# Germany

SEP = \\
SRCDIR = .$(SEP)

# platform configuration

DLLSINPATH = 1
ARCH = x86
HACKED_APPLY =
WINDOWS = 1
WINDOWS_SHELL = 1
UNAME_SYS = win32

# file extensions

O = .obj
A = -static.lib
SO = .dll
EXE = .exe
ASM = .c
MANIFEST = .manifest

# commands

C_COMPILER = cl
CXX_COMPILER = cl
LINKER = link
LIBRARIAN = lib

# options

C_COMPILER_OPTIONS = -nologo -wd4142 -DHAVE_CHICKEN_CONFIG_H
C_COMPILER_STATIC_OPTIONS = -MT
C_COMPILER_SHARED_OPTIONS = -MD -DPIC
LINKER_OPTIONS = -nologo
C_COMPILER_GUI_RUNTIME_OPTIONS = -DC_WINDOWS_GUI
INCLUDES = -I.
LIBRARIES = ws2_32.lib advapi32.lib

# debug

ifdef DEBUGBUILD
C_COMPILER_OPTIONS = -nologo -DHAVE_CHICKEN_CONFIG_H
#C_COMPILER_OPTIMIZATION_OPTIONS = -Zi
C_COMPILER_SHARED_OPTIONS = -MDd -DPIC
LINKER_OPTIONS += -debug
endif

# compiler-dependent output options used by rules

C_COMPILER_COMPILE_OPTION = -c
C_COMPILER_OUTPUT_OPTION = -Fo
C_COMPILER_OUTPUT = $(C_COMPILER_OUTPUT_OPTION)$@
C_COMPILER_BUILD_UNSAFE_RUNTIME_OPTIONS = $(C_COMPILER_BUILD_RUNTIME_OPTIONS) -DC_UNSAFE_RUNTIME

# linker-dependent output options

LINKER_EXECUTABLE_OPTIONS = 
LINKER_STATIC_OPTIONS = $(LINKER_EXECUTABLE_OPTIONS)
LINKER_OUTPUT_OPTION = -out:
LINKER_OUTPUT = $(LINKER_OUTPUT_OPTION)$@
LINKER_LIBRARY_OPTION =
LINKER_LIBRARY_PREFIX = lib
LINKER_LIBRARY_SUFFIX = .lib
LINKER_LINK_SHARED_LIBRARY_OPTIONS = -dll
LINKER_LINK_SHARED_DLOADABLE_OPTIONS = -dll

PROGRAM_IMPORT_LIBRARIES = chicken.lib csi.lib csc.lib chicken-setup.lib chicken-profile.lib chicken-bug.lib
LIBCHICKEN_IMPORT_LIBRARY = libchicken.lib
LIBUCHICKEN_IMPORT_LIBRARY = libuchicken.lib
LIBCHICKENGUI_IMPORT_LIBRARY = libchickengui.lib
MSVC_CHICKEN_IMPORT_LIBRARIES = $(PROGRAM_IMPORT_LIBRARIES) $(LIBCHICKEN_IMPORT_LIBRARY) \
	  		        $(LIBUCHICKEN_IMPORT_LIBRARY) $(LIBCHICKENGUI_IMPORT_LIBRARY)
MSVC_CHICKEN_EXPORT_FILES = $(MSVC_CHICKEN_IMPORT_LIBRARIES:.lib=.exp)
LIBCHICKEN_SO_LINKER_OPTIONS = -implib:$(LIBCHICKEN_IMPORT_LIBRARY)
LIBUCHICKEN_SO_LINKER_OPTIONS = -implib:$(LIBUCHICKEN_IMPORT_LIBRARY)
LIBCHICKENGUI_SO_LINKER_OPTIONS = -implib:$(LIBCHICKENGUI_IMPORT_LIBRARY)

# librarian-dependent output options

LIBRARIAN_OPTIONS = -nologo
LIBRARIAN_OUTPUT_OPTION = -out:
LIBRARIAN_OUTPUT = $(LIBRARIAN_OUTPUT_OPTION)$@

# assembler-dependent (here we are configured for compiling C w/ inline assembly)

ASSEMBLER_OPTIONS = $(C_COMPILER_OPTIONS)
ASSEMBLER_OUTPUT_OPTION = -Fo
ASSEMBLER_OUTPUT = $(ASSEMBLER_OUTPUT_OPTION)$@
ASSEMBLER_COMPILE_OPTION = -c

# stuff for static-only builds
ifdef STATICBUILD
PRIMARY_LIBCHICKEN = libchicken$(A)
else
PRIMARY_LIBCHICKEN = libchicken$(SO)
LIBCHICKEN_SO_FILE = libchicken$(SO)
LIBUCHICKEN_SO_FILE = libuchicken$(SO)
LIBCHICKENGUI_SO_FILE = libchickengui$(SO)
endif

# import libraries, needed in windows

LIBCHICKEN_SO_LIBRARIES = $(LIBRARIES)
LIBUCHICKEN_SO_LIBRARIES = $(LIBRARIES)
LIBCHICKENGUI_SO_LIBRARIES = $(LIBRARIES) kernel32.lib user32.lib gdi32.lib

# manifest files, yet more windows crap (VC2005+)

INSTALL_MANIFEST_OPTIONS = -m755

CHICKEN_MANIFEST = $(CHICKEN_PROGRAM)$(EXE)$(MANIFEST)
CSI_MANIFEST = $(CSI_PROGRAM)$(EXE)$(MANIFEST)
CHICKEN_PROFILE_MANIFEST = $(CHICKEN_PROFILE_PROGRAM)$(EXE)$(MANIFEST)
CSC_MANIFEST = $(CSC_PROGRAM)$(EXE)$(MANIFEST)
CHICKEN_BUG_MANIFEST = $(CHICKEN_BUG_PROGRAM)$(EXE)$(MANIFEST)
ifndef BUILD_SETUP_TOOLS
CHICKEN_SETUP_MANIFEST = $(CHICKEN_SETUP_PROGRAM)$(EXE)$(MANIFEST)
CLEAN_MANIFESTS = $(CHICKEN_MANIFEST) $(CSI_MANIFEST) $(CHICKEN_PROFILE_MANIFEST) \
	          $(CSC_MANIFEST) $(CHICKEN_BUG_MANIFEST) $(CHICKEN_SETUP_MANIFEST) \
	          $(LIBCHICKEN_SO_FILE)$(MANIFEST) $(LIBUCHICKEN_SO_FILE)$(MANIFEST) \
	          $(LIBCHICKENGUI_SO_FILE)$(MANIFEST)
else
CHICKEN_INSTALL_MANIFEST = $(CHICKEN_INSTALL_PROGRAM)$(EXE)$(MANIFEST)
CHICKEN_UNINSTALL_MANIFEST = $(CHICKEN_UNINSTALL_PROGRAM)$(EXE)$(MANIFEST)
CHICKEN_STATUS_MANIFEST = $(CHICKEN_STATUS_PROGRAM)$(EXE)$(MANIFEST)
CLEAN_MANIFESTS = $(CHICKEN_MANIFEST) $(CSI_MANIFEST) $(CHICKEN_PROFILE_MANIFEST) \
	          $(CSC_MANIFEST) $(CHICKEN_BUG_MANIFEST) $(CHICKEN_INSTALL_MANIFEST) \
		  $(CHICKEN_UNINSTALL_MANIFEST) $(CHICKEN_STATUS_MANIFEST) \
	          $(LIBCHICKEN_SO_FILE)$(MANIFEST) $(LIBUCHICKEN_SO_FILE)$(MANIFEST) \
	          $(LIBCHICKENGUI_SO_FILE)$(MANIFEST)
endif

# special files

CHICKEN_CONFIG_H = chicken-config.h
APPLY_HACK_SRC = 
APPLY_HACK_OBJECT = 
POSIXFILE = posixwin

CUSTOM_CHICKEN_DEFAULTS=1

# default settings

include defaults.make

# main target

all: libchicken$(A) libuchicken$(A) chicken$(EXE) csi$(EXE) chicken-profile$(EXE) \
	csc$(EXE) libchicken$(SO) \
	libuchicken$(SO) libchickengui$(SO) libchickengui$(A) chicken-setup$(EXE)

chicken-config.h.in:
	echo #define HAVE_DIRENT_H 0 >>$@
	echo #define HAVE_INTTYPES_H 0 >>$@
	echo #define HAVE_LIMITS_H 1 >>$@
	echo #define HAVE_LONG_LONG 1 >>$@
	echo #define HAVE_MEMMOVE 1 >>$@
	echo #define HAVE_MEMORY_H 1 >>$@
	echo #define HAVE_STDINT_H 0 >>$@
	echo #define HAVE_STDLIB_H 1 >>$@
	echo #define HAVE_STRERROR 1 >>$@
	echo #define HAVE_STRINGS_H 0 >>$@
	echo #define HAVE_STRING_H 1 >>$@
	echo #define HAVE_STRTOLL 0 >>$@
	echo #define HAVE_SYS_STAT_H 1 >>$@
	echo #define HAVE_SYS_TYPES_H 1 >>$@
	echo #define HAVE_UNISTD_H 0 >>$@
	echo #define HAVE_UNSIGNED_LONG_LONG 0 >>$@
	echo #define HAVE_WINDOWS_H 1 >>$@
	echo #define HAVE__STRTOI64 1 >>$@
	echo #define STDC_HEADERS 1 >>$@
	echo #define HAVE_ALLOCA_H 0 >>$@
	echo #define HAVE_DIRECT_H 1 >>$@
	echo #define HAVE_ERRNO_H 1 >>$@
	echo #define HAVE_GCVT 1 >>$@
	echo #define HAVE_LOADLIBRARY 1 >>$@
	echo #define HAVE_GETPROCADDRESS 1 >>$@
	echo #define HAVE_WINSOCK2_H 1 >>$@
	echo #define HAVE_WS2TCPIP_H 1 >>$@
	echo #define C_STACK_GROWS_DOWNWARD 1 >>$@
ifdef GCHOOKS
	echo #define C_GC_HOOKS >>$@
endif
ifdef SYMBOLGC
	echo #define C_COLLECT_ALL_SYMBOLS >>$@
endif
ifdef NOAPPLYHOOK
	echo #define C_NO_APPLY_HOOK >>$@
endif
	echo #define C_HACKED_APPLY >>$@

chicken-config.h: chicken-config.h.in chicken-defaults.h
	copy /Y /B chicken-config.h.in + chicken-defaults.h $@

chicken-defaults.h:
	echo /* generated */ >$@
	echo #define C_BUILD_TAG "$(BUILD_TAG)" >>$@
	echo #define C_CHICKEN_PROGRAM "$(CHICKEN_PROGRAM)$(EXE)" >>$@
	echo #define C_WINDOWS_SHELL 1 >>$@
	echo #ifndef C_INSTALL_CC >>$@
	echo # define C_INSTALL_CC "$(C_COMPILER)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_CXX >>$@
	echo # define C_INSTALL_CXX "$(CXX_COMPILER)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_CFLAGS >>$@
	echo # define C_INSTALL_CFLAGS "$(C_COMPILER_OPTIONS) $(C_COMPILER_OPTIMIZATION_OPTIONS)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_LDFLAGS >>$@
	echo # define C_INSTALL_LDFLAGS "$(LINKER_OPTIONS) $(LINKER_OPTIMIZATION_OPTIONS)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_SHARE_HOME >>$@
	echo # define C_INSTALL_SHARE_HOME "$(DATADIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_BIN_HOME >>$@
	echo # define C_INSTALL_BIN_HOME "$(BINDIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_EGG_HOME >>$@
	echo # define C_INSTALL_EGG_HOME "$(EGGDIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_LIB_HOME >>$@
	echo # define C_INSTALL_LIB_HOME "$(LIBDIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_STATIC_LIB_HOME >>$@
	echo # define C_INSTALL_STATIC_LIB_HOME "$(LIBDIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_INCLUDE_HOME >>$@
	echo # define C_INSTALL_INCLUDE_HOME "$(INCDIR)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_MORE_LIBS >>$@
	echo # define C_INSTALL_MORE_LIBS "$(LIBRARIES)" >>$@
	echo #endif >>$@
	echo #ifndef C_INSTALL_MORE_STATIC_LIBS >>$@
	echo # define C_INSTALL_MORE_STATIC_LIBS "$(LIBRARIES)" >>$@
	echo #endif >>$@
	echo #ifndef C_DEFAULT_TARGET_STACK_SIZE >>$@
	echo # define C_DEFAULT_TARGET_STACK_SIZE $(NURSERY) >>$@
	echo #endif >>$@
	echo #ifndef C_DEFAULT_TARGET_HEAP_SIZE >>$@
	echo # define C_DEFAULT_TARGET_HEAP_SIZE 0 >>$@
	echo #endif >>$@
	echo #ifndef C_STACK_GROWS_DOWNWARD >>$@
	echo # define C_STACK_GROWS_DOWNWARD $(STACKDIRECTION) >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_MORE_LIBS >>$@
	echo # define C_TARGET_MORE_LIBS "$(TARGET_LIBRARIES)" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_MORE_STATIC_LIBS >>$@
	echo # define C_TARGET_MORE_STATIC_LIBS "$(TARGET_LIBRARIES)" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_CC >>$@
	echo # define C_TARGET_CC "$(TARGET_C_COMPILER)" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_CXX >>$@
	echo # define C_TARGET_CXX "$(TARGET_CXX_COMPILER)" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_CFLAGS >>$@
	echo # define C_TARGET_CFLAGS "$(TARGET_C_COMPILER_OPTIONS) $(TARGET_C_COMPILER_OPTIMIZATION_OPTIONS)" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_LDFLAGS >>$@
	echo # define C_TARGET_LDFLAGS "$(TARGET_LINKER_OPTIONS) $(TARGET_LINKER_OPTIMIZATION_OPTIONS)" >>$@
	echo #endif >>$@
	echo #ifndef C_CROSS_CHICKEN >>$@
	echo # define C_CROSS_CHICKEN $(CROSS_CHICKEN) >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_BIN_HOME >>$@
	echo # define C_TARGET_BIN_HOME "$(TARGET_PREFIX)/bin" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_LIB_HOME >>$@
	echo # define C_TARGET_LIB_HOME "$(TARGET_PREFIX)/lib" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_RUN_LIB_HOME >>$@
	echo # define C_TARGET_RUN_LIB_HOME "$(TARGET_PREFIX)/lib" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_SHARE_HOME >>$@
	echo # define C_TARGET_SHARE_HOME "$(TARGET_PREFIX)/share" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_INCLUDE_HOME >>$@
	echo # define C_TARGET_INCLUDE_HOME "$(TARGET_PREFIX)/include" >>$@
	echo #endif >>$@
	echo #ifndef C_TARGET_STATIC_LIB_HOME >>$@
	echo # define C_TARGET_STATIC_LIB_HOME "$(TARGET_PREFIX)/lib" >>$@
	echo #endif >>$@
	echo #ifndef C_CSC_PROGRAM" >>$@
	echo # define C_CSC_PROGRAM "$(CSC_PROGRAM)" >>$@
	echo #endif" >>$@
	echo #ifndef C_CSI_PROGRAM" >>$@
	echo # define C_CSI_PROGRAM "$(CSI_PROGRAM)" >>$@
	echo #endif" >>$@
	echo #ifndef C_CHICKEN_BUG_PROGRAM" >>$@
	echo # define C_CHICKEN_BUG_PROGRAM "$(CHICKEN_BUG_PROGRAM)" >>$@
	echo #endif" >>$@
	echo #ifndef C_BINARY_VERSION >>$@
	echo # define C_BINARY_VERSION $(BINARYVERSION) >>$@
	echo #endif >>$@

include $(SRCDIR)rules.make
