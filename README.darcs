This file contains instructions for getting a working Chicken system from 
a darcs checkout.  These are the canonical instructions.

An alternate method of building from darcs is given in INSTALL-CMake.txt.  Please see that file for details on that method.  The two methods are completely independent of each other.

(The following instructions were orignally written by Tony Garnock-Jones <tonyg@kcbbs.gen.nz>, 1 August 2002 for use with CVS.)

The project homepage is http://www.call-with-current-continuation.org/,
and the darcs repository can be accessed at http://galinha.ucpel.tche.br/chicken.

0. You will need:

	* A system Chicken has been ported to. See the homepage for details.
	  To bootstrap the system Chicken 2.315 or newer is needed.
	* A sensible C compiler. GCC 2.95.x, 3.0.x and 3.1.x get regular
	  testing, at least on Intel. Others may also work.
	* GNU automake - recommended is version 1.7.6
	* GNU autoconf - version 2.57 or higher is recommended.
	* libtool 1.5 or higher.

1. Get a recent source snapshot tarball - chicken-X.YYYY.tar.gz. You
   can usually find snapshots linked from the project homepage,
   http://www.call-with-current-continuation.org/.

2. Unpack it, configure it, build it, and install it. It doesn't
   matter where you install it, and you won't need shared libraries -
   this installation from a snapshot will *only* be used to bootstrap
   the darcs version:

	$ gzip -dc chicken-X.YYYY.tar.gz | tar -xvf -
	$ cd chicken-X.YYYY
	$ ./configure --prefix=`pwd`/dist --disable-shared
	$ gmake
	$ gmake install

We'll assume from here on that you installed the built snapshot in
/home/yourname/chicken-X.YYYY/dist, so that the "chicken" compiler
binary itself will be at

	/home/yourname/chicken-X.YYYY/dist/bin/chicken

3. Get the darcs repository of Chicken:

	$ darcs get http://galinha.ucpel.tche.br/chicken

4. Execute the "autogen.sh" script to run automake and autoconf, which causes
   "./configure" and "Makefile.in" files to be built:

	$ sh autogen.sh

5. Run "./configure" with the parameters you want to use for your
   final Chicken installation. For example:

	$ ./configure

6. To generate the .c files needed to build the bootstrapped compiler,
   you must supply the full path to the Chicken compiler you built in
   step 2.

	$ gmake BOOTSTRAP_PATH=/home/yourname/chicken-X.YYYY/dist/bin

This command will cause the entire system to be built using the
compiler you installed from the source snapshot. 
Never mind those warnings.

7. Once the system has built, you may install it as per usual:

	$ gmake install

8. You may now remove the snapshot build (chicken-X.YYYY) from your
   system. It is no longer required. If you need to bootstrap again,
   you can use the full path to the chicken compiler you installed in
   step 7; or, if you are tracking changes made to the darcs repository, you
   can simply

	$ darcs pull http://galinha.ucpel.tche.br/chicken
	$ gmake

which will build the compiler using "./chicken" - that is, the
compiler that corresponds to the darcs sources.

(Optional: If you now want to perform a 2-stage bootstrap, in which
the newly built compiler compiles itself, you can simply "touch *.scm;
gmake".)
