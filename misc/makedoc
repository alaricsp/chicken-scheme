#!/bin/sh
#| ;;; makedoc -*- Hen -*-
exec csi -s $0 "$@"
|#

;;; usage: misc/makedoc [-pdf] [PAGE]

(use html-stream stream-ext srfi-40 stream-wiki utils srfi-13 url posix)

(define-constant +outpath+ "html")
(define-constant +extension-path+ "wiki-extensions")
(define-constant +index-page+ "The User's Manual")

(define (but-options args)
  (filter (lambda (f)
            (not (string-prefix? "-" f)))
          args))

(define *pages* (directory "wiki"))
(define *only* (:optional (but-options (command-line-arguments)) #f))
(define *generate-pdf* (member "-pdf" (command-line-arguments)))

(define (hyphen s)
  (string-substitute " " "-" s #t) )

(define (clean-link lnk)
  (cond ((or (string-prefix? "toc:" lnk) (string-prefix? "tags:" lnk))
	 lnk)
	((string-ci=? lnk +index-page+) "index.html")
	((any (lambda (f) (string-ci=? f lnk)) *pages*)
	 (string-append (hyphen (string-downcase lnk)) ".html|" lnk) )
	((string-prefix? "http:" lnk) lnk)
	(else (string-append "http://galinha.ucpel.tche.br/" lnk) ) ) )

(define (convert-page page)
  (let ((data (read-all page)))
    (string-concatenate
     (let loop ((i 0) (all '()))
       (match (string-search-positions "\\[\\[([^]]+)\\]\\]" data i)
	 (((s e) (ls le))
	  (let ((lnk (substring data ls le)))
	    (loop
	     e
	     (cons
	      (string-append
	       (substring data i (+ 2 s))
	       (clean-link lnk)
	       "]]")
	      all) ) ) )
	 (_ (reverse (cons (substring data i) all))) ) ) ) ) )

;; We need this to keep the order of chapters in the PDF file.
(define manual-wiki-files
  '("The User's Manual"
    "Basic mode of operation"
    "Using the compiler"
    "Using the interpreter"
    "Supported language"
    "Deviations from the standard"
    "Extensions to the standard"
    "Non standard read syntax"
    "Non standard macros and special forms"
    "Pattern matching"
    "Declarations"
    "Parameters"
    "Unit library"
    "Unit eval"
    "Unit extras"
    "Unit srfi-1"
    "Unit srfi-4"
    "Unit srfi-13"
    "Unit srfi-14"
    "Unit match"
    "Unit regex"
    "Unit srfi-18"
    "Unit posix"
    "Unit utils"
    "Unit tcp"
    "Unit lolevel"
    "Interface to external functions and variables"
    "Accessing external objects"
    "Foreign type specifiers"
    "Embedding"
    "Callbacks"
    "Locations"
    "Other support procedures"
    "C interface"
    "chicken-setup"
    "Data representation"
    "Bugs and limitations"
    "faq"
    "Acknowledgements"
    "Bibliography"
    ))

(define (chapters-sanity-check)
  "Checks if there all the wiki files listed in `*pages*' are in
`manual-wiki-files', just in case we forget to update this
variable when new chapters are added; and if all the files listed
in `manual-wiki-files' can be found in `*pages*'."
  (for-each (lambda (file)
              (when (not (member file manual-wiki-files))
                (error (conc file " was not found in `manual-wiki-files'."))))
            *pages*)
  (for-each (lambda (file)
              (when (not (member file *pages*))
                (error (conc "File \"" file "\" was not found under the wiki directory."))))
            manual-wiki-files))
  
(define (html-files->pdf)
  "Requires htmldoc (http://www.htmldoc.org)."
  (system (conc "htmldoc --book --numbered --size a4 --title "
                "--toctitle \"Chicken User's Manual\" "
                " --header t "
                "--linkstyle plain --outfile chicken.pdf "
                (if *only*
                    (html-pagename *only*)
                    (string-intersperse
                     (map html-pagename manual-wiki-files))))))

(define (html-pagename pagename)
  (hyphen (string-downcase 
           (make-pathname
            +outpath+
            (if (string=? pagename +index-page+) "index" pagename) "html"))))

(define (wiki-pagename pagename)
  (make-pathname "wiki" pagename) )

(define *loaded-extensions* (make-hash-table))

(for-each
 (cut load-extensions-from-file *loaded-extensions* <>)
 (glob (conc +extension-path+ "/*")) )

(define (wiki-files->html)
  (for-each
   (lambda (p)
     (let* ((pagename p)
	    (pw (wiki-pagename pagename))
            (po (html-pagename pagename)))
       (when (or (not (file-exists? po))
		 (> (file-modification-time pw) (file-modification-time po)) )
	 (print p " -> " po " ...")
	 (with-output-to-file po
	   (lambda ()
	     (printf "<html><head><title>CHICKEN User's Manual - ~a</title></head><body>~%" pagename)
	     (write-stream
	      (wiki->html
	       (string->stream (convert-page pw))
	       stream-null
	       ""
	       (constantly stream-null)
	       (constantly stream-null)
	       (make-hash-table)
	       (make-html-header 1)
	       (constantly stream-null)
	       (constantly #t)
	       *loaded-extensions*) )
	     (printf "~%</body></html>") ) ) ) ) )
   (if *only* (list *only*) *pages*) ) )



;;; Check for help command line options
(let ((args (command-line-arguments)))
  (when (and (not (null? args)) (member (car args) '("-h" "-help" "--help" "-?")))
    (print "Usage: misc/makedoc [-h | --help | -?]\n"
           "       misc/makedoc [-pdf] [PAGE]")
    (exit)))

;;; Here come the conversions          
(when *generate-pdf*
  (chapters-sanity-check))

(wiki-files->html)

(when *generate-pdf*
  (html-files->pdf))
