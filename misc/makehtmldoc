#!/bin/sh
#| ;;; makehtmldoc -*- Hen -*-
exec csi -s $0 "$@"
|#

;;; usage: makehtmldoc WIKIPATH OUTPATH [PAGE]

(use html-stream stream-ext srfi-40 stream-wiki utils srfi-13 url)

(define +pages+ (string-split #<<EOF
Accessing external objects
Acknowledgements
Additional files
Basic mode of operation
Bibliography
Bugs and limitations
C interface
Callbacks
Data representation
Declarations
Deviations from the standard
Embedding
Extensions to the standard
Foreign type specifiers
Interface to external functions and variables
Locations
Non standard macros and special forms
Non standard read syntax
Other support procedures
Parameters
Pattern matching
Supported language
The User's Manual
Unit eval
Unit extras
Unit library
Unit lolevel
Unit match
Unit posix
Unit regex
Unit srfi-1
Unit srfi-13
Unit srfi-14
Unit srfi-18
Unit srfi-4
Unit tcp
Unit utils
Using the compiler
Using the interpreter
chicken-setup
faq
EOF
	"\n") )

(define-values (*wikipath* *outpath* *only*) 
  (match (command-line-arguments)
    ((w o) (values w o #f))
    ((w o p) (values w o p))
    (_ (print "usage: makehtmldoc WIKIPATH OUTPUTPATH [PAGE]")
       (exit 1) ) ) )

(define-constant +index-page+ "The User's Manual")

(define (clean-link lnk)
  (cond ((or (string-prefix? "toc:" lnk) (string-prefix? "tags:" lnk))
	 lnk)
	((string-ci=? lnk +index-page+) "index.html")
	((any (lambda (f) (string-ci=? f lnk)) +pages+)
	 (string-downcase (string-append (url-encode lnk) ".html|" lnk) ) )
	((string-prefix? "http:" lnk) lnk)
	(else (string-append "http://galinha.ucpel.tche.br/" lnk) ) ) )

(define (convert-page page)
  (let ((data (read-all (make-pathname *wikipath* page))))
    (string-concatenate
     (let loop ((i 0) (all '()))
       (match (string-search-positions "\\[\\[([^]]+)\\]\\]" data i)
	 (((s e) (ls le))
	  (let ((lnk (substring data ls le)))
	    (loop
	     e
	     (cons
	      (string-append
	       (substring data i (+ 2 s))
	       (clean-link lnk)
	       "]]")
	      all) ) ) )
	 (_ (reverse (cons (substring data i) all))) ) ) ) ) )

(for-each
 (lambda (p)
   (let ((po (string-downcase (make-pathname *outpath* (if (string=? p +index-page+) "index" p) "html"))))
     (print p " -> " po " ...")
     (with-output-to-file po
       (lambda ()
	 (write-stream
	  (wiki->html 
	   (string->stream (convert-page p)) ) ) ) ) ) )
 (if *only* (list *only*) +pages+) )


